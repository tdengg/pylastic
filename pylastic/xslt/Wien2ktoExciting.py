#!/usr/bin/python

import os
import math
from lxml import etree
import numpy as np

#________________________________________________________________________________________________________________________________
ElDic = {'120':'H','2':'He','3':'Li','4':'Be','5':'B','6':'C','7':'N','8':'O','9':'F','10':'Ne','11':'Na','12':'Mg','13':'Al','14':'Si'\
        ,'15':'P','16':'S','17':'Cl','18':'Ar','19':'K','20':'Ca','21':'Sc','22':'Ti','23':'V','24':'Cr','25':'Mn','26':'Fe'\
        ,'27':'Co','28':'Ni','29':'Cu','30':'Zn','31':'Ga','32':'Ge','33':'As','34':'Se','35':'Br','36':'Kr','37':'Rb','38':'Sr'\
        ,'39':'Y','40':'Zr','41':'Nb','42':'Mo','43':'Tc','44':'Ru','45':'Rh','46':'Pd','47':'Ag','48':'Cd','49':'In','50':'Sn'\
        ,'51':'Sb','52':'Te','53':'I','54':'Xe','55':'Cs','56':'Ba','57':'La','58':'Ce','59':'Pr','60':'Nd','61':'Pm','62':'Sm'\
        ,'63':'Eu','64':'Gd','65':'Tb','66':'Dy','67':'Ho','68':'Er','69':'Tm','70':'Yb','71':'Lu','72':'Hf','73':'Ta','74':'W'\
        ,'75':'Re','76':'Os','77':'Ir','78':'Pt','79':'Au','80':'Hg','81':'Tl','82':'Pb','83':'Bi','84':'Po','85':'At','86':'Rn'\
        ,'87':'Fr','88':'Ra','89':'Ac','90':'Th','91':'Pa','92':'U','93':'Np','94':'Pu','95':'Am','96':'Cm','97':'Bk','98':'Cf'\
        ,'99':'Es','100':'Fm','101':'Md','102':'No','103':'Lr','104':'Rf','105':'Db','106':'Sg','107':'Bh','108':'Hs','109':'Mt'\
        ,'110':'Ds','111':'Rg','112':'Cn','113':'Uut','114':'Uuq','115':'Uup','116':'Uuh','117':'Uus','118':'Uuo'}
#________________________________________________________________________________________________________________________________

IN = raw_input("\n>>>> Please enter name of the Wien2k structure file: ")
while (os.path.exists(IN)==False): 
    print("\n    ... Oops ERROR: There is NO file named "+ IN +" !?!?!?    \n")
    IN = raw_input("\n>>>> Please enter the correct name of the Wien2k structure file or press Ctrl + C to leave programm: ")
OUT = raw_input("\n>>>> Please enter name of the exciting input file you would like to have: ")

#________________________________________________________________________________________________________________________________
#**************************************************Execute sgroup and find SGN***************************************************
os.system('sgroup -wi '+ IN +' > sgroup.out ')
os.system('sgroup -wi '+ IN +' -wo '+ IN +'_sout')
warn = 0
for line in open("sgroup.out", "r"):
    if line.find("warning:") >= 0:
        warn = 1
        print("\n                 ... sgroup found a new structure    \n")
        view = raw_input(">>>> Do you want to view the structure file generated by sgroup ? (yes/no) ")
        while (view != 'yes' and view != 'no'): view = raw_input("\n>>>> Please enter yes or no \n")
        if (view == 'yes'): os.system('gedit '+IN +'_sout')
        choose = raw_input("\n>>>> Do you want to use the structure file generated by sgroup ? (yes/no) ")
        while (choose != 'yes' and choose != 'no'): choose = raw_input("\n>>>> Please enter yes or no \n")
        if (choose == 'yes'):
            IN = IN +'_sout' ; break
        else : os.system('rm '+IN+'_sout') ;break
    else : os.system('rm '+IN+'_sout') ;break

for line in open("sgroup.out", "r"):
    if line.find("Number and name of space group:") >= 0 : SGN=int(float(line.split()[6])); break

if   (  1 <= SGN and SGN <=   2): n = 7   # Triclinic
elif (  3 <= SGN and SGN <=  15): n = 6   # Monoclinic
elif ( 16 <= SGN and SGN <=  74): n = 5   # Orthorhombic
elif ( 75 <= SGN and SGN <= 142): n = 4   # Tetragonal
elif (143 <= SGN and SGN <= 167): n = 3   # Rhombohedral
elif (168 <= SGN and SGN <= 194): n = 2   # Hexagonal
elif (195 <= SGN and SGN <= 230): n = 1   # Cubic

os.system('rm sgroup.out')

#________________________________________________________________________________________________________________________________
#*********************************************** Get element and atomic positions************************************************

inobj = open(IN,"r")
xc =[] ; yc = [] ; zc = [] ; orz = []; mt = []; cont = []
for line in inobj:    
    if (line.find("X=") >= 0): 
        xcoord  = float(line[12:21])
        ycoord  = float(line[25:34])
        zcoord  = float(line[38:47])
        xc.append(xcoord)
        yc.append(ycoord)
        zc.append(zcoord)
    if (line.find("RMT") >= 0):
        oz = int(float(line.split()[-1]))
        if (oz == 1 ): oz = 120 
        rmt = float(line.split()[-3])
        xc.append(oz)
        yc.append(oz)
        zc.append(oz)
        mt.append(rmt)

maxi = len(xc)
for i in range(0,maxi):
    if (xc[i] > 1.0): cont.append(i)
inobj.close()
cont1 = len(cont)

#________________________________________________________________________________________________________________________________

inobj = open(IN,"r")
lines=inobj.readlines()
tit = lines[0].split()[0]
#________________________________________________________________________________________________________________________________

brl = lines[1].split()[0]

#________________________________________________________________________________________________________________________________

#***************************************************** Get cell parameters*******************************************************

l4 = lines[3]
a = float(l4[0:9])
b = float(l4[10:19])
c = float(l4[20:29])
if(warn == 0 or warn == 1 and choose == 'yes' ):
    if(n == 1): an = math.radians(90.) ; bn = math.radians(90.) ; gn = math.radians(90.) 
    elif(n == 2): an = math.radians(90.) ; bn = math.radians(90.) ; gn = math.radians(120.)
    elif(n == 4): an = math.radians(90.) ; bn = math.radians(90.) ; gn = math.radians(90.)
    elif(n == 5): an = math.radians(90.) ; bn = math.radians(90.) ; gn = math.radians(90.)
    else:
        an = math.radians(float(l4[30:39]))
        bn = math.radians(float(l4[40:49]))
        gn = math.radians(float(l4[50:59]))
else:
    an = math.radians(float(l4[30:39]))
    bn = math.radians(float(l4[40:49]))
    gn = math.radians(float(l4[50:59]))
x = math.cos
y = math.sin
if(brl == 'B'):
    M_new = [[a*0.5,b*(-0.5),c*0.5],\
            [a*0.5,b*0.5,c*(-0.5)],\
            [a*(-0.5),b*-0.5,c*0.5]]
    scalen = a
elif(brl == 'F'):
    M_new = [[a*0.5,b*0.5,0.],\
            [a*0.5,0.,c*0.5],\
            [0.,b*0.5,c*0.5]]
    scalen = a
elif(brl == 'R'):
    M_new = [[a/((3**0.5)*0.5),b*(-0.5),c/3.],\
            [a/((3**0.5)*0.5),b*0.5,c/3.],\
            [(-a)/((3**0.5)*0.5),0.,c/3.]]
    scalen = M_new[0][0]
elif(brl == 'CXY'):
    M_new = [[a*0.5,b*(-0.5),0.],\
            [a*0.5,b*0.5,0.],\
            [0.,0.,c]]
    scalen = a
elif(brl == 'CYZ'):
    M_new = [[a, 0., 0.],\
            [0., (-b)/2., c/2.],\
            [0., b/2., c/2.]]
    scalen = M_new[0][0]
elif(brl == 'CXZ'):
    M_new = [[a*y(gn)/2., b*x(gn)/2., (-c)/2.],\
            [0., b, 0.],\
            [a*y(gn)/2., b*x(gn)/2., (-c)/2.]]
    scalen = M_new[0][0]
else:
    M_new = [[a*((1+2.*x(an)*x(bn)*x(gn)-(x(an))**2.-(x(bn))**2.-(x(gn))**2.)**0.5/(y(an))),a*((x(gn)-x(bn)*x(an))/(y(an))),a*x(bn)],\
            [0.,b*y(an),b*x(an)],\
            [0.,0.,c]]
    scalen = M_new[0][0]
for k in range(3):
    for l in range(3):
        M_new[k-1][l-1] = round((M_new[k-1][l-1]/scalen),8)
        if (abs(M_new[k-1][l-1]) <= 10**(-10)): M_new[k-1][l-1] = 0.00000000
M_new = np.array(M_new)
inobj.close()
#________________________________________________________________________________________________________________________________
#************************************************** Write exciting input file****************************************************

fmt = '%16.10f'
fmt2 = '%11.8f'
NS_XSI = "{http://www.w3.org/2001/XMLSchema-instance}"
root = etree.Element('input',xsltpath="/fshome/dcl/EXCITING/exciting/xml/")
doc = etree.ElementTree(root)
root.set( NS_XSI + "noNamespaceSchemaLocation", "/fshome/dcl/EXCITING/exciting/xml/excitinginput.xsd")
pi = etree.ProcessingInstruction(
        'xml-stylesheet',
        'href="inputtohtml.xsl" type="text/xsl"' 
        )
root.addprevious(pi)

title = etree.SubElement(root, "title")
title.text = tit

structure = etree.SubElement(root,"structure", speciespath="/fshome/dcl/EXCITING/exciting/species")
crystal = etree.SubElement(structure, "crystal" , scale = str(scalen))
bv1 = etree.SubElement(crystal,"basevect")
bv1.text = str(fmt%M_new[0][0])+ str(fmt%M_new[0][1])+ str(fmt%M_new[0][2])
bv2 = etree.SubElement(crystal,"basevect")
bv2.text = str(fmt%M_new[1][0])+ str(fmt%M_new[1][1])+str(fmt%M_new[1][2])
bv3 = etree.SubElement(crystal,"basevect")
bv3.text = str(fmt%M_new[2][0])+ str(fmt%M_new[2][1])+str(fmt%M_new[2][2])
for i in range(0,cont1):
    speciesi= etree.SubElement(structure, "species", speciesfile= ElDic[str(xc[cont[i]])]+'.xml', rmt = str(mt[i]))
    for j in range(1,maxi+1):
        if ( i == 0):
            if(j != cont[i]+1 and xc[j-1]<=1 and j <= cont[i]):
                atomj = etree.SubElement(speciesi, "atom", coord = str(fmt2%xc[j-1]) + str(fmt2%yc[j-1]) +str(fmt2%zc[j-1]))
        else:
            if(j != cont[i]+1 and xc[j-1]<=1 and j <= cont[i]+1 and j > cont[i-1] ):
                atomj = etree.SubElement(speciesi, "atom", coord = str(fmt2%xc[j-1]) + str(fmt2%yc[j-1]) +str(fmt2%zc[j-1]))
groundstate = etree.SubElement(root, "groundstate", ngridk = '8 8 8', rgkmax= '7.0',swidth= '0.01', xctype= 'GGAPerdew-Burke-Ernzerhof')
keywords = etree.SubElement(root,"keywords")
if(n==1):
    if(brl=='B'):
        keywords.text = ("Body centered cubic")
    elif(brl=='F'):
        keywords.text = ("Face centered cubic")
    elif(brl=='F'):
        keywords.text = ("Simple cubic")
if(n==2):
    keywords.text = ("Hexagonal")    
if(n==3):
    keywords.text = ("Rhombohedral")
if(n==4):
    if(brl=='B'):
        keywords.text = ("Body centered tetragonal")
    elif(brl=='P'):
        keywords.text = ("Simple tetragonal")
if(n==5):
    if(brl=='B'):
        keywords.text = ("Body centered orthorhombic")
    elif(brl=='F'):
        keywords.text = ("Face centered orthorhombic")
    elif(brl=='P'):
        keywords.text = ("Simple orthorhombic")
    elif(brl=='CXY' or brl=='CYZ' or brl=='CXZ'):
        keywords.text = ("Base centered orthorhombic")
if(n==6):
    if(brl=='P'):
        keywords.text = ("Simple monoclinic")
    elif(brl=='CXZ'):
        keywords.text = ("Base centered monoclinic")
if(n==7):
    keywords.text = ("Triclinic")

outobj=open(OUT,"w")
#outobj=open('input.xml',"w")
doc.write(outobj,method='xml',pretty_print=True, xml_declaration=True, encoding='utf-8')
outobj.close()


